---
title: "Assignment 1"
---

My first assignment has two parts.

## (a)

I watched the Model Migration: from Excel to R video by Johnny Breen. In the video, he explains that one day his boss gave him the task of transferring data from Excel to R and he tells about his experiences while doing this task. He says that many companies maintain a large number of legacy models in the Excel platform, and with the advent of data analytics, these companies are looking for ways to migrate their existing models from the Excel environment to the R environment. He shares his experiences about the difficulties that future analysts may encounter in this model transition process and gives 3 main recommendations. These are: 1) Don't copy Excel :) 2)Structure your model 3) Keep things simple.

## (b)

**1) Indentation and Code Blocks**:

In Python, indentation is used to define code blocks. The indentation level determines the grouping of code. In R, code blocks are defined using curly braces **`{}`** without relying on indentation to define the structure.

`{Python:}   if 5 > 2:     print("Five is greater than two")     print("Python uses indentation for code blocks") R:   if (5 > 2) {     print("Five is greater than two")     print("R uses curly braces for code blocks") }`

**2)Indexing (0-based vs. 1-based)**:

In Python, indexing starts from 0, meaning the first element of an array or list is accessed using index 0. In R, indexing starts from 1, so the first element is accessed using index 1.

\`\`\`{python:} list = \[1, 2, 3, 4, 5\] print(my_list\[0\])

R: v \<- c(1, 2, 3, 4, ) print(my_vector\[1\])

```         

Both of the above codes return the value 1

**3)Concatenating Strings**:

In Python, strings are concatenated using the + operator. In R, strings are concatenated using the paste or paste() functions.

```{python:}
  
greeting <- "Hello"
name <- "Alice"
message <- paste(greeting, ", ", name, "!", sep = "")
print(message)  # Output: Hello, Alice!

R:

greeting <- "Hello"
name <- "Alice"
message <- paste(greeting, ", ", name, "!", sep = "")
print(message)  # Output: Hello, Alice!
```

## **(c)**

```{r}
library(dslabs)
data("na_example")
print(na_example)
number_of_na <- sum(is.na(na_example))
print(number_of_na)
new_na_example <- na_example
na_example[is.na(na_example)] <- 0
print(na_example)
print(sum(is.na(na_example)))
```
