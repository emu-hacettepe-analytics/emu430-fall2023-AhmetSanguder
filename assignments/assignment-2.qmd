---
title: "Assignment 2"
---

# Assignment 2

## (1)

```{r}
url <- c("https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&sort=user_rating,desc&num_votes=2500,&country_of_origin=TR&count=250","https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&sort=user_rating,desc&num_votes=2500,&country_of_origin=TR&count=250")
```

## (2)

```{r}
#| output: false
library(tidyverse)
library(rvest)
library(stringr)
library(knitr)


convert_time <- function(time_str) {
  hours <- 0
  minutes <- 0
  
  if (grepl("h", time_str)) {
    time_components <- strsplit(time_str, "h|m")[[1]]
    if (length(time_components) >= 1) {
      hours <- as.numeric(time_components[1])
    }
    if (length(time_components) >= 2) {
      minutes <- as.numeric(time_components[2])
    }
  } else {
    minutes <- as.numeric(gsub("m", "", time_str))
  }
  
  total_minutes <- hours * 60 + minutes
  return(total_minutes)
}


data_html <- read_html(url[1])
title_names_1 <- data_html |> html_nodes('.ipc-title__text')
title_names_1 <- html_text(title_names_1)
title_names_1 <- tail(head(title_names_1,-1),-1)
title_names_1 <- str_split(title_names_1, " ", n=2)
title_names_1 <- unlist(lapply(title_names_1, function(x) {x[2]}))

year_1 <- data_html |> html_nodes(".dli-title-metadata-item:nth-child(1)")
year_1 <- as.numeric(html_text(year_1))

duration_1 <- data_html |> html_nodes((".dli-title-metadata-item:nth-child(2)"))
duration_1 <- html_text(duration_1)
duration_1 <- unlist(lapply(duration_1, convert_time))

rating_1 <- data_html |> html_nodes(".ratingGroup--imdb-rating")
rating_1 <- html_text(rating_1)
rating_1 <- as.numeric(str_extract(rating_1, "\\d+\\.\\d+"))

votes_1 <- data_html |> html_nodes(".kRnqtn")
votes_1 <- html_text(votes_1)
votes_1 <- as.numeric(gsub("\\D", "", votes_1))


data_html <- read_html(url[2])
title_names_2 <- data_html |> html_nodes('.ipc-title__text')
title_names_2 <- html_text(title_names_2)
title_names_2 <- tail(head(title_names_2,-1),-1)
title_names_2 <- str_split(title_names_2, " ", n=2)
title_names_2 <- unlist(lapply(title_names_2, function(x) {x[2]}))

year_2 <- data_html |> html_nodes(".dli-title-metadata-item:nth-child(1)")
year_2 <- as.numeric(html_text(year_2))

duration_2 <- data_html |> html_nodes((".dli-title-metadata-item:nth-child(2)"))
duration_2 <- html_text(duration_2)
duration_2 <- unlist(lapply(duration_2, convert_time))

rating_2 <- data_html |> html_nodes(".ratingGroup--imdb-rating")
rating_2 <- html_text(rating_2)
rating_2 <- as.numeric(str_extract(rating_2, "\\d+\\.\\d+"))

votes_2 <- data_html |> html_nodes(".kRnqtn")
votes_2 <- html_text(votes_2)
votes_2 <- as.numeric(gsub("\\D", "", votes_2))

Title <- c(title_names_1,title_names_2)
Year <- c(year_1,year_2)
Duration <- c(duration_1,duration_2)
Rating <- c(rating_1,rating_2)
Votes <- c(votes_1,votes_2)

movie_data <- data.frame(
  Title = Title,
  Year = Year,
  Duration = Duration,
  Rating = Rating,
  Votes = Votes
)
```

## (3)

## (a)

```{r}
movies <- movie_data %>% 
  arrange(desc(Rating))
```

```{r}
kable(
  movies %>%
    head(5),
  caption = "Top 5 Movies",
  col.names = c("Title", "Year", "Duration", "Rating", "Votes")
)
```

I watched all 5 movies on this list. Of course, there would be movies whose order I would change if I were to make them, but I am happy with this list (especially the first 2 rows).

```{r}
kable(
  movies %>%
    tail(5),
  caption = "Bottom 5 Movies",
  col.names = c("Title", "Year", "Duration", "Rating", "Votes")
)
```

I respect the opinions of the voters and have not watched any of the movies on this list. :)

## (b)

```{r}
kable(
  movie_data %>%
    filter(Title == "CM101MMXI Fundamentals" | Title == "Hababam Sinifi" | Title == "Masumiyet"),
  caption = "My Best Three",
  col.names = c("Title", "Year", "Duration", "Rating", "Votes")
)
```

## (c)

```{r}
movie_data %>% 
  group_by(Year) %>%
  summarize(yearly_average = mean(Rating)) %>%
  ggplot(aes(x = Year, y = yearly_average)) + geom_point() +
  ggtitle("Yearly Rating Averages")
```

```{r}
ggplot(movie_data, aes(x = factor(Year))) +
  geom_bar(fill = "blue", color = "black") +
  labs(x = "Year", y = "Number of Movies") +
  ggtitle("Number of Movies Over the Years") +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 90)
  )
```

```{r}
movie_data$Year <- as.factor(movie_data$Year)
ggplot(movie_data, aes(x = Year, y = Rating, fill = factor(Year))) +
  geom_boxplot(color = "black",width = 0.5) +
  labs(x = "Year", y = "Rating") +
  ggtitle("Box Plots of Movie Ratings Over the Years") +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 90)
  )
```

## (d)

```{r}
corr <- cor(movie_data$Votes, movie_data$Rating)
cat("Correlation between Votes and Ratings:", corr)
```

## (e)

```{r}
corr <- cor(movie_data$Duration, movie_data$Rating)
cat("Correlation between Votes and Ratings:", corr)
```

## (4)

```{r}
movie_data1 = movie_data
url <- c("https://m.imdb.com/search/title/?title_type=feature&sort=release_date,asc&num_votes=2500,&groups=top_1000&country_of_origin=TR&count=250")
data_html <- read_html(url)
title_names <- data_html |> html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names,-1),-1)
title_names <- str_split(title_names, " ", n=2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))

year <- data_html |> html_nodes(".dli-title-metadata-item:nth-child(1)")
year <- as.numeric(html_text(year))

top_movies <- data.frame(
  Title = title_names,
  Year = year
  )
kable (
  top_movies,
  caption = "Turkish Movies in the Top 1000",
)
```

```{r}
movie_data <- movie_data %>% mutate(Year = as.numeric(Year))
top_movies <- top_movies %>% mutate(Year = as.numeric(Year))

movies_top2 <- movies %>%
  inner_join(top_movies, by = c("Title", "Year")) %>%
  arrange(desc(Rating))
kable(
  movies_top2,
  caption = "Turkish Movies in the Top 1000 Full Table",
  col.names = c("Title", "Year", "Duration", "Rating", "Votes")
)
```

```{r}
movie_data1 <- arrange(movie_data1, desc(Rating))

kable(
  head(movie_data1, 11),
  caption = "Turkish Movies in the Top 11",
  col.names = c("Title", "Year", "Duration", "Rating", "Votes")
)
```
